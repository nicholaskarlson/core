name: PyMapGIS CI/CD Pipeline
'on':
  push:
    branches:
    - main
    - develop
    - dev
  pull_request:
    branches:
    - main
env:
  PYTHON_VERSION: '3.11'
  POETRY_VERSION: 1.6.1
jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version:
        - '3.10'
        - '3.11'
        - '3.12'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
    - name: Configure Poetry
      run: |
        poetry config virtualenvs.create true
        poetry config cache-dir ~/.cache/pypoetry
    - name: Cache Poetry dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pypoetry
        key: poetry-${{ runner.os }}-${{ matrix.python-version }}-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          poetry-${{ runner.os }}-${{ matrix.python-version }}-
    - name: Install dependencies
      run: |
        poetry install --with dev --sync
        poetry show
    - name: Run tests
      run: poetry run pytest && poetry run mypy pymapgis/ && poetry run ruff check
        pymapgis/
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      if: matrix.python-version == '3.11'
  security:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        version: ${{ env.POETRY_VERSION }}
    - name: Configure Poetry
      run: |
        poetry config virtualenvs.create true
        poetry config cache-dir ~/.cache/pypoetry
    - name: Cache Poetry dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pypoetry
        key: poetry-${{ runner.os }}-${{ env.PYTHON_VERSION }}-${{ hashFiles('**/poetry.lock') }}
        restore-keys: |
          poetry-${{ runner.os }}-${{ env.PYTHON_VERSION }}-
    - name: Install dependencies
      run: |
        poetry install --with dev --sync
        poetry show
    - name: Run security scan with bandit
      run: poetry run pip install bandit && poetry run bandit -r pymapgis/ -f json -o security-scan-results.json || true
    - name: Run dependency check
      run: poetry run pip install safety && poetry run safety check || true
  build:
    needs:
    - test
    - security
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    - name: Check Docker credentials
      id: docker-check
      run: |
        if [ -n "${{ secrets.DOCKER_USERNAME }}" ] && [ -n "${{ secrets.DOCKER_PASSWORD }}" ]; then
          echo "has_credentials=true" >> $GITHUB_OUTPUT
        else
          echo "has_credentials=false" >> $GITHUB_OUTPUT
        fi
    - name: Login to Docker Hub
      if: steps.docker-check.outputs.has_credentials == 'true'
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    - name: Build and push Docker image
      if: steps.docker-check.outputs.has_credentials == 'true'
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: |
          pymapgis/pymapgis-app:latest
          pymapgis/pymapgis-app:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    - name: Build Docker image (local only)
      if: steps.docker-check.outputs.has_credentials == 'false'
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: |
          pymapgis/pymapgis-app:latest
          pymapgis/pymapgis-app:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    - name: Deployment status
      run: |
        if [ "${{ steps.docker-check.outputs.has_credentials }}" = "true" ]; then
          echo "‚úÖ Docker image built and pushed to Docker Hub successfully!"
          echo "üöÄ Image: pymapgis/pymapgis-app:latest"
        else
          echo "‚ÑπÔ∏è  Docker image built locally (no registry push)"
          echo "üìñ To enable container registry push, see: docs/deployment/container-registry-setup.md"
          echo "üîß Quick fix: Add DOCKER_USERNAME and DOCKER_PASSWORD secrets to enable Docker Hub push"
        fi
  deploy-staging:
    needs:
    - build
    runs-on: ubuntu-latest
    environment: staging
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Deploy to staging
      run: echo 'Deploying to staging environment'
    - name: Run smoke tests
      run: echo 'Running smoke tests'
  deploy-production:
    needs:
    - deploy-staging
    runs-on: ubuntu-latest
    environment: production
    if: github.ref == 'refs/heads/main'
    steps:
    - name: Deploy to production
      run: echo 'Deploying to production environment'
    - name: Run health checks
      run: echo 'Running health checks'
