name: Docker Multi-Registry Deployment

on:
  workflow_call:
    inputs:
      registry:
        description: 'Container registry to use (dockerhub, ecr, gcr, ghcr)'
        required: false
        default: 'dockerhub'
        type: string
      environment:
        description: 'Deployment environment'
        required: false
        default: 'staging'
        type: string
    secrets:
      DOCKER_USERNAME:
        required: false
      DOCKER_PASSWORD:
        required: false
      AWS_ACCESS_KEY_ID:
        required: false
      AWS_SECRET_ACCESS_KEY:
        required: false
      GCP_SERVICE_ACCOUNT_KEY:
        required: false

env:
  PYTHON_VERSION: '3.11'
  POETRY_VERSION: 1.6.1

jobs:
  docker-build-deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Configure registry settings
      id: registry
      run: |
        case "${{ inputs.registry }}" in
          "dockerhub")
            echo "registry=docker.io" >> $GITHUB_OUTPUT
            echo "image_name=pymapgis/pymapgis-app" >> $GITHUB_OUTPUT
            echo "login_required=true" >> $GITHUB_OUTPUT
            ;;
          "ecr")
            echo "registry=${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com" >> $GITHUB_OUTPUT
            echo "image_name=pymapgis-app" >> $GITHUB_OUTPUT
            echo "login_required=true" >> $GITHUB_OUTPUT
            ;;
          "gcr")
            echo "registry=gcr.io" >> $GITHUB_OUTPUT
            echo "image_name=${{ secrets.GCP_PROJECT_ID }}/pymapgis-app" >> $GITHUB_OUTPUT
            echo "login_required=true" >> $GITHUB_OUTPUT
            ;;
          "ghcr")
            echo "registry=ghcr.io" >> $GITHUB_OUTPUT
            echo "image_name=${{ github.repository }}" >> $GITHUB_OUTPUT
            echo "login_required=true" >> $GITHUB_OUTPUT
            ;;
          *)
            echo "registry=docker.io" >> $GITHUB_OUTPUT
            echo "image_name=pymapgis/pymapgis-app" >> $GITHUB_OUTPUT
            echo "login_required=false" >> $GITHUB_OUTPUT
            ;;
        esac
        
    - name: Login to Docker Hub
      if: ${{ inputs.registry == 'dockerhub' && secrets.DOCKER_USERNAME != '' }}
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Configure AWS credentials
      if: ${{ inputs.registry == 'ecr' }}
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
        
    - name: Login to Amazon ECR
      if: ${{ inputs.registry == 'ecr' }}
      uses: aws-actions/amazon-ecr-login@v2
      
    - name: Login to Google Container Registry
      if: ${{ inputs.registry == 'gcr' }}
      uses: docker/login-action@v3
      with:
        registry: gcr.io
        username: _json_key
        password: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}
        
    - name: Login to GitHub Container Registry
      if: ${{ inputs.registry == 'ghcr' }}
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Generate image tags
      id: tags
      run: |
        REGISTRY="${{ steps.registry.outputs.registry }}"
        IMAGE_NAME="${{ steps.registry.outputs.image_name }}"
        
        if [ "$REGISTRY" != "docker.io" ]; then
          FULL_IMAGE_NAME="${REGISTRY}/${IMAGE_NAME}"
        else
          FULL_IMAGE_NAME="${IMAGE_NAME}"
        fi
        
        echo "image_base=${FULL_IMAGE_NAME}" >> $GITHUB_OUTPUT
        echo "image_latest=${FULL_IMAGE_NAME}:latest" >> $GITHUB_OUTPUT
        echo "image_sha=${FULL_IMAGE_NAME}:${{ github.sha }}" >> $GITHUB_OUTPUT
        echo "image_env=${FULL_IMAGE_NAME}:${{ inputs.environment }}" >> $GITHUB_OUTPUT
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: ${{ steps.registry.outputs.login_required == 'true' }}
        tags: |
          ${{ steps.tags.outputs.image_latest }}
          ${{ steps.tags.outputs.image_sha }}
          ${{ steps.tags.outputs.image_env }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          PYTHON_VERSION=${{ env.PYTHON_VERSION }}
          POETRY_VERSION=${{ env.POETRY_VERSION }}
          
    - name: Build Docker image (local only)
      if: ${{ steps.registry.outputs.login_required == 'false' }}
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: |
          ${{ steps.tags.outputs.image_latest }}
          ${{ steps.tags.outputs.image_sha }}
          ${{ steps.tags.outputs.image_env }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Image scan with Trivy
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ steps.tags.outputs.image_latest }}
        format: 'sarif'
        output: 'trivy-results.sarif'
        
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'
        
    - name: Output deployment info
      run: |
        echo "ðŸš€ Docker Deployment Summary"
        echo "Registry: ${{ inputs.registry }}"
        echo "Environment: ${{ inputs.environment }}"
        echo "Image: ${{ steps.tags.outputs.image_latest }}"
        echo "SHA Tag: ${{ steps.tags.outputs.image_sha }}"
        echo "Pushed: ${{ steps.registry.outputs.login_required }}"
